// 211RDB204 Juris Ozoliņš
// 211RDB276 Toms Zvirbulis

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Scanner;


public class Main {
	static Scanner sc = new Scanner(System.in);

	public static void main(String[] args) {
		String choiseStr;
		String sourceFile, resultFile, firstFile, secondFile;
		
		loop: while (true) {
			
			choiseStr = sc.next();
								
			switch (choiseStr) {
			case "comp":
				System.out.print("source file name: ");
				sourceFile = sc.next();
				System.out.print("archive name: ");
				resultFile = sc.next();
				comp(sourceFile, resultFile);
				break;
			case "decomp":
				System.out.print("archive name: ");
				sourceFile = sc.next();
				System.out.print("file name: ");
				resultFile = sc.next();
				decomp(sourceFile, resultFile);
				break;
			case "size":
				System.out.print("file name: ");
				sourceFile = sc.next();
				size(sourceFile);
				break;
			case "equal":
				System.out.print("first file name: ");
				firstFile = sc.next();
				System.out.print("second file name: ");
				secondFile = sc.next();
				System.out.println(equal(firstFile, secondFile));
				break;
			case "about":
				about();
				break;
			case "exit":
				break loop;
			}
		}

		sc.close();
	}

	public static void comp(String fileName, String outFileName) {
		// Get character data from input file.
		HashMap<Byte, Integer> words = new HashMap<Byte, Integer>();
		String text = "";
		Boolean nullFound = false;
		try {
			sc = new Scanner(new FileReader(fileName));
			while (sc.hasNextLine()) {
				// Save whole text for later use.
				String line = sc.nextLine() + ((sc.hasNextLine()) ? "\n" : "");
				text += line;
				byte[] bytes = line.getBytes(StandardCharsets.UTF_8);
				
				// Save individual characters and keep track of how many times they're used.
				for(byte b : bytes) {
					if(b == 1) {
						nullFound = true;
					}
					if(words.containsKey(b)) {
						words.merge(b, 1, Integer::sum);
					}else {
						words.put(b, 1);
					}
				}
				
			}
			
			sc.close();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		
		// If necessary, find a free byte in the text that will be used to replace any characters with the value of 0 (null).
		// The tree decompiling process relies on this symbol to not be present.
		byte nullByte = 1;
		if(nullFound) {
			for(int i = 2; i < 256; i++) {
				if(!words.containsKey((byte)(i))) {
					nullByte = (byte)(i);
				}
			}
		}
		
		// Create frequency tree using char values used for future size reference.
		CompTree tree = new CompTree(words.entrySet(), nullByte);
		//tree.PrintData();
		//CompTree.PrintTree(tree.top);
		
		// Save to file.
		try {
			FileOutputStream out = new FileOutputStream(outFileName);
			out.write(tree.Compile(text, nullByte));
			out.close();
		} 
		catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	public static void decomp(String sourceFile, String resultFile) {
		// TODO: implement this method
	}
	
	public static void size(String sourceFile) {
		try {
			FileInputStream f = new FileInputStream(sourceFile);
			System.out.println("size: " + f.available());
			f.close();
		}
		catch (IOException ex) {
			System.out.println(ex.getMessage());
		}
		
	}
	
	public static boolean equal(String firstFile, String secondFile) {
		try {
			FileInputStream f1 = new FileInputStream(firstFile);
			FileInputStream f2 = new FileInputStream(secondFile);
			int k1, k2;
			byte[] buf1 = new byte[1000];
			byte[] buf2 = new byte[1000];
			do {
				k1 = f1.read(buf1);
				k2 = f2.read(buf2);
				if (k1 != k2) {
					f1.close();
					f2.close();
					return false;
				}
				for (int i=0; i<k1; i++) {
					if (buf1[i] != buf2[i]) {
						f1.close();
						f2.close();
						return false;
					}
						
				}
			} while (k1 == 0 && k2 == 0);
			f1.close();
			f2.close();
			return true;
		}
		catch (IOException ex) {
			System.out.println(ex.getMessage());
			return false;
		}
	}
	
	public static void about() {
		// TODO insert information about authors
		System.out.println("211RDB204 Juris Ozoliņš");
		System.out.println("211RDB276 Toms Zvirbulis");
	}
}
